/* This code was generated by phptoc.php */

#ifndef PHP_PHPJS_H
#define PHP_PHPJS_H

#include <php.h>
#include <php_ini.h>
#include <ext/standard/info.h>
#include <ext/standard/file.h>
#include <main/php_streams.h>
#include <Zend/zend.h>
#include <Zend/zend_API.h>
#include <Zend/zend_exceptions.h>
#include <Zend/zend_interfaces.h>
#include <Zend/zend_inheritance.h>
#include <Zend/zend_constants.h>
#include <Zend/zend_operators.h>
#include <Zend/zend_globals_macros.h>
#include <Zend/zend_smart_str.h>

#define IS_BOOL IS_FALSE | IS_TRUE

#define _S(str) str, sizeof(str) - 1

extern zend_module_entry phpjs_module_entry;
#define phpext_phpjs_ptr &phpjs_module_entry

typedef struct
{
    duk_context *ctx;
    zval * vm;
    zend_object zobj;
    //HashTable *ht;
} php_js_t;

typedef struct {
    duk_context * ctx;
    duk_idx_t idx;
	zval * vm;
	zend_object zobj;
} phpjs_wrap_duk_t;

BEGIN_EXTERN_C()

extern PHPAPI zend_class_entry *phpjs_JS_ptr;
extern PHPAPI zend_class_entry *phpjs_JSException_ptr;
extern PHPAPI zend_class_entry *phpjs_JSObjectWrapper_ptr;
extern PHPAPI zend_class_entry *phpjs_JSFunctionWrapper_ptr;
extern PHPAPI zend_class_entry *phpjs_JS_ptr;
extern void duk_to_zval(zval * var, duk_context * ctx, duk_idx_t idx);
extern void zval_to_duk(duk_context * ctx, char * name, zval * value);
extern duk_idx_t duk_push_php_array_or_object(duk_context * ctx, HashTable * myht);
extern duk_ret_t php_get_function_wrapper(duk_context * ctx);
extern duk_ret_t duk_set_into_php(duk_context * ctx);
extern duk_ret_t duk_get_from_php(duk_context * ctx);
extern void php_register_function_handler(TSRMLS_D);
extern void php_register_object_handler(TSRMLS_D);
extern void phpjs_wrapped_free(zend_object * obj TSRMLS_DC);
extern void phpjs_add_duk_context(zval * this, duk_context * ctx, duk_idx_t idx TSRMLS_DC);
extern int zval_array_to_stack(duk_context * ctx, zval * a_args);
extern void phpjs_php__call(duk_context * ctx, char * fnc, zval * a_args, zval * return_value TSRMLS_DC);
void duk_php_init(duk_context * ctx);
void duk_php_throw(duk_context * ctx, duk_idx_t idx TSRMLS_DC);
HashTable *getht();

#define php_duk_free_return(ctx) duk_pop(ctx); 

END_EXTERN_C()

#define FETCH_THIS_WRAPPER(this) phpjs_wrap_duk_t* obj = (phpjs_wrap_duk_t *)((char *)Z_OBJ_P(this) - XtOffsetOf(phpjs_wrap_duk_t, zobj)); \
	duk_context *ctx = obj->ctx;

#define SET_PROP(var, t, n, v)  zend_update_property_string(t, var, n, sizeof(n)-1, v TSRMLS_CC);

#define THROW_EXCEPTION(message) do { \
    zval tc_ex; \
    object_init_ex(&tc_ex, phpjs_JSException_ptr); \
    SET_PROP(&tc_ex, phpjs_JSException_ptr, "message", message); \
    zend_throw_exception_object(&tc_ex TSRMLS_CC); \
} while (0);

#define PHPJS_GET_OBJECT(entry, z) (entry *)(entry *)((char *)Z_OBJ_P(z) - XtOffsetOf(entry, zobj))

#endif
